; this will be a comment

; will require two sections: 
; .text will hold the code,
; .data will hold static data
section .text

; here are demonstrations of each instruction
add r0, r1 
sub r0, r1
mul r0, r1

and r0, r3
or r0, r2 ; this is a test to see if inline comments work
xor r1, r3
cmp r0, r1

mov r0, r1
movr r0, 0x1100
mova 0x0022, r1

jmpl 0xaaaa
jmp r1

ld r1, 0x0111

swp r1, r2
pushr r1
pusha 0xff11
pop r2

nop

int 0x80

hlt


; those are all of the raw instructions that are available
; there will also be compiler abstractions, including 
; loops and labels

.loop       ; this is a label pointing to the first 
swp r1, r1
jmp .loop


section .data

.string
bytes "This is an example of a thing with a label" 0
; note that the bytes operator supports both string and 
; and integer literals (in both hex and decimal)


section .tada
bytes "tada"